generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider = "typegraphql-prisma"
  output   = "../prisma/generated/type-graphql"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organizer {
  id       String     @id @default(uuid())
  name     String
  password String?
  queues   Queue[]  @relation("queues_in_organizer")
}

model Queue {
  id             String        @id @default(uuid())
  organizer_id   String
  join_code      String
  name           String
  address        String
  state          QueueState
  capacity       Int
  max_party_size Int        @default(1)
  grace_period   Int?
  offline_time   Int?
  create_time    DateTime
  organizer      Organizer  @relation("queues_in_organizer", fields: [organizer_id], references: [id])
  users          User[]     @relation("users_in_queue")
  average_wait   Int
}

model User {
  id             String        @id @default(uuid())
  name           String
  queue_id       String
  summoned       Boolean    @default(false)
  password       String?
  phone_number   String
  party_size     Int        @default(1)
  last_online    DateTime?
  index          Int
  /// @TypeGraphQL.omit(output: true)
  estimated_wait Int
  join_time      DateTime
  reneged_time   DateTime?
  state          UserStatus
  queue          Queue      @relation("users_in_queue", fields: [queue_id], references: [id])
  total_wait     Int?
}

enum QueueState {
  ACTIVE
  PAUSED
  INACTIVE
}

enum UserStatus {
  KICKED
  ENQUEUED
  SERVICED
  DEFERRED
  ABANDONED
  NOSHOW
}
