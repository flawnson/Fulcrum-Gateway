generator client {
  provider = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

generator typegraphql {
  provider = "typegraphql-prisma"
  output   = "../prisma/generated/type-graphql"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Queue {
  id             String        @id @default(uuid())
  join_code      String     @unique
  name           String
  address        String
  state          QueueState @default(ACTIVE)
  capacity       Int
  max_party_size Int        @default(1)
  grace_period   Int?
  offline_time   Int?
  create_time    DateTime
  users          User[]     @relation("users_in_queue")
  password       String
}

model User {
  id             String        @id @default(uuid())
  name           String
  summoned       Boolean    @default(false)
  phone_number   String
  party_size     Int        @default(1)
  last_online    DateTime?
  index          Int        @default(0)
  join_time      DateTime   @default(now())
  reneged_time   DateTime?
  /// @TypeGraphQL.omit(output: true)
  status         UserStatus @default(ENQUEUED)
  queue_id       String
  queue          Queue      @relation("users_in_queue", fields: [queue_id], references: [id])
  total_wait     Int?
  summoned_time  DateTime?
}

enum QueueState {
  ACTIVE
  PAUSED
  INACTIVE
}

enum UserStatus {
  KICKED
  ENQUEUED
  SERVICED
  DEFERRED
  ABANDONED
  NOSHOW
}
