{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useTab = useTab;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _interactions = require(\"@react-native-aria/interactions\");\n\nvar _selection = require(\"@react-aria/selection\");\n\nvar _utils = require(\"@react-native-aria/utils\");\n\nvar tabsIds = new WeakMap();\n\nfunction useTab(props, state, ref) {\n  var item = props.item,\n      propsDisabled = props.isDisabled;\n  var key = item.key;\n  var manager = state.selectionManager,\n      selectedKey = state.selectedKey;\n  var isSelected = key === selectedKey;\n\n  var _useSelectableItem = (0, _selection.useSelectableItem)({\n    selectionManager: manager,\n    key: key,\n    ref: ref\n  }),\n      itemProps = _useSelectableItem.itemProps;\n\n  var isDisabled = propsDisabled || state.disabledKeys.has(key);\n\n  var _usePress = (0, _interactions.usePress)((0, _extends2.default)({}, itemProps, {\n    isDisabled: isDisabled\n  })),\n      pressProps = _usePress.pressProps;\n\n  var tabId = generateId(state, key, 'tab');\n  var tabPanelId = generateId(state, key, 'tabpanel');\n  var tabIndex = pressProps.tabIndex;\n\n  if (isSelected && !isDisabled) {\n    tabIndex = 0;\n  }\n\n  var onMouseDown = function onMouseDown(e) {\n    return e.stopPropagation();\n  };\n\n  var tabPropsTemp = (0, _extends2.default)({}, pressProps, {\n    onMouseDown: onMouseDown,\n    'id': tabId,\n    'aria-selected': isSelected,\n    'aria-disabled': isDisabled || undefined,\n    'aria-controls': isSelected ? tabPanelId : undefined,\n    'tabIndex': isDisabled ? undefined : tabIndex,\n    'role': 'tab'\n  });\n  var tabProps = (0, _utils.useMapDomPropsToRN)(tabPropsTemp, ref);\n  return {\n    tabProps: tabProps\n  };\n}\n\nfunction generateId(state, key, role) {\n  if (typeof key === 'string') {\n    key = key.replace(/\\s+/g, '');\n  }\n\n  var baseId = tabsIds.get(state);\n  return baseId + \"-\" + role + \"-\" + key;\n}","map":{"version":3,"sources":["useTab.web.ts"],"names":["tabsIds","isDisabled","propsDisabled","key","selectionManager","selectedKey","isSelected","itemProps","useSelectableItem","ref","state","pressProps","usePress","tabId","generateId","tabPanelId","tabIndex","onMouseDown","e","tabPropsTemp","tabProps","useMapDomPropsToRN","baseId","role"],"mappings":";;;;;;;;;AAGA;;AACA;;AAGA;;AAGA,IAAMA,OAAO,GAAG,IAAhB,OAAgB,EAAhB;;AAOO,SAAA,MAAA,CAAA,KAAA,EAAA,KAAA,EAAA,GAAA,EAII;AACT,MAAI,IAAJ,GAAA,KAAA,CAAI,IAAJ;AAAA,MAAwBE,aAAxB,GAAA,KAAA,CAAYD,UAAZ;AACA,MAAME,GAAN,GAAA,IAAA,CAAMA,GAAN;AACA,MAAI,OAAJ,GAAA,KAAA,CAAMC,gBAAN;AAAA,MAAiCC,WAAjC,GAAA,KAAA,CAAiCA,WAAjC;AAEA,MAAIC,UAAU,GAAGH,GAAG,KAApB,WAAA;;AAEA,2BAAoBK,kCAAkB;AACpCJ,IAAAA,gBAAgB,EADoB,OAAA;AAEpCD,IAAAA,GAFoC,EAEpCA,GAFoC;AAGpCM,IAAAA,GAAAA,EAAAA;AAHoC,GAAlBD,CAApB;AAAA,MAAMD,SAAN,sBAAMA,SAAN;;AAKA,MAAIN,UAAU,GAAGC,aAAa,IAAIQ,KAAK,CAALA,YAAAA,CAAAA,GAAAA,CAAlC,GAAkCA,CAAlC;;AAEA,kBAAqBE,uDAAS,SAATA;AAAyBX,IAAAA,UAAAA,EAAAA;AAAzBW,KAArB;AAAA,MAAMD,UAAN,aAAMA,UAAN;;AACA,MAAIE,KAAK,GAAGC,UAAU,CAAA,KAAA,EAAA,GAAA,EAAtB,KAAsB,CAAtB;AACA,MAAIC,UAAU,GAAGD,UAAU,CAAA,KAAA,EAAA,GAAA,EAA3B,UAA2B,CAA3B;AACA,MAAME,QAAN,GAjBS,UAiBT,CAAMA,QAAN;;AAGA,MAAIV,UAAU,IAAI,CAAlB,UAAA,EAA+B;AAC7BU,IAAAA,QAAQ,GAARA,CAAAA;AArBO;;AA8BT,MAAMC,WAAW,GAAMC,SAAjBD,WAAiBC,CAAAA,CAAD;AAAA,WAAWA,CAAC,CAAlC,eAAiCA,EAAX;AAAA,GAAtB;;AAEA,MAAMC,YAAY,8BAAI,UAAJ;AAEhBF,IAAAA,WAFoB,EAEpBA,WAFgB;AAGhB,UAHoB,KAAJ;AAIhB,qBAJoB,UAAJ;AAKhB,qBAAiBhB,UAAU,IALP,SAAJ;AAMhB,qBAAiBK,UAAU,GAAA,UAAA,GANP,SAAJ;AAOhB,gBAAYL,UAAU,GAAA,SAAA,GAPF,QAAJ;AAQhB,YAAQ;AARQ,IAAlB;AAWA,MAAMmB,QAAQ,GAAGC,+BAAkB,YAAlBA,EAAjB,GAAiBA,CAAjB;AAEA,SAAO;AACLD,IAAAA,QAAAA,EAAAA;AADK,GAAP;AAGD;;AAED,SAAA,UAAA,CAAA,KAAA,EAAA,GAAA,EAAA,IAAA,EAIE;AACA,MAAI,OAAA,GAAA,KAAJ,QAAA,EAA6B;AAC3BjB,IAAAA,GAAG,GAAGA,GAAG,CAAHA,OAAAA,CAAAA,MAAAA,EAANA,EAAMA,CAANA;AACD;;AAED,MAAImB,MAAM,GAAGtB,OAAO,CAAPA,GAAAA,CAAb,KAAaA,CAAb;AACA,SAAUsB,MAAV,SAAoBC,IAApB,SAAA,GAAA;AACD","sourcesContent":["import { AriaTabProps } from '@react-types/tabs';\nimport { HTMLAttributes, Key, RefObject } from 'react';\nimport { SingleSelectListState } from '@react-stately/list';\nimport { usePress } from '@react-native-aria/interactions';\nimport {\n  useSelectableItem,\n} from '@react-aria/selection';\nimport { useMapDomPropsToRN } from '@react-native-aria/utils';\n\n\nconst tabsIds = new WeakMap<SingleSelectListState<unknown>, string>();\n\ninterface TabAria {\n  /** Props for the tab element. */\n  tabProps: HTMLAttributes<HTMLElement>;\n}\n\nexport function useTab<T>(\n  props: AriaTabProps<T>,\n  state: SingleSelectListState<T>,\n  ref: RefObject<HTMLElement>\n): TabAria {\n  let { item, isDisabled: propsDisabled } = props;\n  let { key } = item;\n  let { selectionManager: manager, selectedKey } = state;\n\n  let isSelected = key === selectedKey;\n\n  let { itemProps } = useSelectableItem({\n    selectionManager: manager,\n    key,\n    ref,\n  });\n  let isDisabled = propsDisabled || state.disabledKeys.has(key);\n\n  let { pressProps } = usePress({ ...itemProps, isDisabled });\n  let tabId = generateId(state, key, 'tab');\n  let tabPanelId = generateId(state, key, 'tabpanel');\n  let { tabIndex } = pressProps;\n\n  // selected tab should have tabIndex=0, when it initializes\n  if (isSelected && !isDisabled) {\n    tabIndex = 0;\n  }\n\n  \n  // Putting this as a last resort, after several hours of debugging.\n  // Why?\n  // tabListProps adds onMouseDown with preventDefault in useSelectableCollection.ts (React Aria) and react-native-web uses onClick for onPress.\n  // This results in tab button not getting focused when clicked\n  // See this example - https://codesandbox.io/s/issue-i-know-but-dont-know-why-1-ydyw5?file=/src/App.js\n  const onMouseDown  =  (e:any) => e.stopPropagation();\n\n  const tabPropsTemp  = {\n    ...pressProps,\n    onMouseDown,\n    'id': tabId,\n    'aria-selected': isSelected,\n    'aria-disabled': isDisabled || undefined,\n    'aria-controls': isSelected ? tabPanelId : undefined,\n    'tabIndex': isDisabled ? undefined : tabIndex,\n    'role': 'tab',\n  }\n  \n  const tabProps = useMapDomPropsToRN(tabPropsTemp, ref)\n\n  return {\n    tabProps\n  };\n}\n\nfunction generateId<T>(\n  state: SingleSelectListState<T>,\n  key: Key,\n  role: string\n) {\n  if (typeof key === 'string') {\n    key = key.replace(/\\s+/g, '');\n  }\n\n  let baseId = tabsIds.get(state);\n  return `${baseId}-${role}-${key}`;\n}\n"]},"metadata":{},"sourceType":"script"}