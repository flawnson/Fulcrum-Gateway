# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AffectedRowsOutput {
  count: Int!
}

input BoolFieldUpdateOperationsInput {
  set: Boolean
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input BoolWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedBoolFilter
  _min: NestedBoolFilter
  equals: Boolean
  not: NestedBoolWithAggregatesFilter
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input EnumQueueStateFieldUpdateOperationsInput {
  set: QueueState
}

input EnumQueueStateFilter {
  equals: QueueState
  in: [QueueState!]
  not: NestedEnumQueueStateFilter
  notIn: [QueueState!]
}

input EnumUserStatusFieldUpdateOperationsInput {
  set: UserStatus
}

input EnumUserStatusFilter {
  equals: UserStatus
  in: [UserStatus!]
  not: NestedEnumUserStatusFilter
  notIn: [UserStatus!]
}

input IntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

type Mutation {
  changeStatus(status: String!, userId: String!): User
  createQueue(address: String!, capacity: Int!, gracePeriod: Int, maxPartySize: Int = 1, name: String!, offlineTime: Int, password: String!): Queue
  createUser(joinCode: String!, name: String!, phoneNumber: String!): User
  deferPosition(time: String!, userId: String): User
  deleteManyUser(where: UserWhereInput): AffectedRowsOutput!
  deleteQueue: Queue
  deleteUser(where: UserWhereUniqueInput!): User
  loginQueue(joinCode: String!, password: String!): Queue
  summon(userId: String!): User
  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRowsOutput!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  upsertUser(create: UserCreateInput!, update: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedBoolWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedBoolFilter
  _min: NestedBoolFilter
  equals: Boolean
  not: NestedBoolWithAggregatesFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input NestedEnumQueueStateFilter {
  equals: QueueState
  in: [QueueState!]
  not: NestedEnumQueueStateFilter
  notIn: [QueueState!]
}

input NestedEnumUserStatusFilter {
  equals: UserStatus
  in: [UserStatus!]
  not: NestedEnumUserStatusFilter
  notIn: [UserStatus!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input NullableDateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input NullableIntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

type Organizer {
  _count: OrganizerCount
  email: String!
  id: String!
  name: String!
  queues(cursor: QueueWhereUniqueInput, distinct: [QueueScalarFieldEnum!], orderBy: [QueueOrderByWithRelationInput!], skip: Int, take: Int, where: QueueWhereInput): [Queue!]!
}

type OrganizerCount {
  queues: Int!
}

type OrganizerCountAggregate {
  _all: Int!
  confirmed: Int!
  email: Int!
  id: Int!
  name: Int!
  password: Int!
}

input OrganizerCountOrderByAggregateInput {
  confirmed: SortOrder
  email: SortOrder
  id: SortOrder
  name: SortOrder
  password: SortOrder
}

input OrganizerCreateNestedOneWithoutQueuesInput {
  connect: OrganizerWhereUniqueInput
  connectOrCreate: OrganizerCreateOrConnectWithoutQueuesInput
  create: OrganizerCreateWithoutQueuesInput
}

input OrganizerCreateOrConnectWithoutQueuesInput {
  create: OrganizerCreateWithoutQueuesInput!
  where: OrganizerWhereUniqueInput!
}

input OrganizerCreateWithoutQueuesInput {
  confirmed: Boolean!
  email: String!
  id: String
  name: String!
  password: String!
}

type OrganizerGroupBy {
  _count: OrganizerCountAggregate
  _max: OrganizerMaxAggregate
  _min: OrganizerMinAggregate
  confirmed: Boolean!
  email: String!
  id: String!
  name: String!
  password: String!
}

type OrganizerMaxAggregate {
  confirmed: Boolean
  email: String
  id: String
  name: String
  password: String
}

input OrganizerMaxOrderByAggregateInput {
  confirmed: SortOrder
  email: SortOrder
  id: SortOrder
  name: SortOrder
  password: SortOrder
}

type OrganizerMinAggregate {
  confirmed: Boolean
  email: String
  id: String
  name: String
  password: String
}

input OrganizerMinOrderByAggregateInput {
  confirmed: SortOrder
  email: SortOrder
  id: SortOrder
  name: SortOrder
  password: SortOrder
}

input OrganizerOrderByWithAggregationInput {
  _count: OrganizerCountOrderByAggregateInput
  _max: OrganizerMaxOrderByAggregateInput
  _min: OrganizerMinOrderByAggregateInput
  confirmed: SortOrder
  email: SortOrder
  id: SortOrder
  name: SortOrder
  password: SortOrder
}

input OrganizerOrderByWithRelationInput {
  confirmed: SortOrder
  email: SortOrder
  id: SortOrder
  name: SortOrder
  password: SortOrder
  queues: QueueOrderByRelationAggregateInput
}

input OrganizerRelationFilter {
  is: OrganizerWhereInput
  isNot: OrganizerWhereInput
}

enum OrganizerScalarFieldEnum {
  confirmed
  email
  id
  name
  password
}

input OrganizerScalarWhereWithAggregatesInput {
  AND: [OrganizerScalarWhereWithAggregatesInput!]
  NOT: [OrganizerScalarWhereWithAggregatesInput!]
  OR: [OrganizerScalarWhereWithAggregatesInput!]
  confirmed: BoolWithAggregatesFilter
  email: StringWithAggregatesFilter
  id: StringWithAggregatesFilter
  name: StringWithAggregatesFilter
  password: StringWithAggregatesFilter
}

input OrganizerUpdateOneRequiredWithoutQueuesInput {
  connect: OrganizerWhereUniqueInput
  connectOrCreate: OrganizerCreateOrConnectWithoutQueuesInput
  create: OrganizerCreateWithoutQueuesInput
  update: OrganizerUpdateWithoutQueuesInput
  upsert: OrganizerUpsertWithoutQueuesInput
}

input OrganizerUpdateWithoutQueuesInput {
  confirmed: BoolFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
}

input OrganizerUpsertWithoutQueuesInput {
  create: OrganizerCreateWithoutQueuesInput!
  update: OrganizerUpdateWithoutQueuesInput!
}

input OrganizerWhereInput {
  AND: [OrganizerWhereInput!]
  NOT: [OrganizerWhereInput!]
  OR: [OrganizerWhereInput!]
  confirmed: BoolFilter
  email: StringFilter
  id: StringFilter
  name: StringFilter
  password: StringFilter
  queues: QueueListRelationFilter
}

input OrganizerWhereUniqueInput {
  email: String
  id: String
}

type Query {
  findFirstUser(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): User
  getQueue(queueId: String): Queue
  getUser(userId: String): User
  groupByOrganizer(by: [OrganizerScalarFieldEnum!]!, having: OrganizerScalarWhereWithAggregatesInput, orderBy: [OrganizerOrderByWithAggregationInput!], skip: Int, take: Int, where: OrganizerWhereInput): [OrganizerGroupBy!]!
  user(where: UserWhereUniqueInput!): User
  users(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): [User!]!
}

enum QueryMode {
  default
  insensitive
}

type Queue {
  _count: QueueCount
  address: String!
  average_wait: Int
  capacity: Int!
  create_time: DateTime!
  grace_period: Int
  id: String!
  join_code: String!
  max_party_size: Int!
  name: String!
  num_abandoned: Int!
  num_deferred: Int!
  num_enqueued: Int!
  num_kicked: Int!
  num_noshow: Int!
  num_serviced: Int!
  offline_time: Int
  organizer: Organizer!
  organizer_id: String!
  password: String!
  state: QueueState!
  users(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): [User!]!
}

type QueueCount {
  users: Int!
}

input QueueCreateNestedOneWithoutUsersInput {
  connect: QueueWhereUniqueInput
  connectOrCreate: QueueCreateOrConnectWithoutUsersInput
  create: QueueCreateWithoutUsersInput
}

input QueueCreateOrConnectWithoutUsersInput {
  create: QueueCreateWithoutUsersInput!
  where: QueueWhereUniqueInput!
}

input QueueCreateWithoutUsersInput {
  address: String!
  capacity: Int!
  create_time: DateTime!
  grace_period: Int
  id: String
  join_code: String!
  max_party_size: Int
  name: String!
  offline_time: Int
  organizer: OrganizerCreateNestedOneWithoutQueuesInput!
  password: String!
  state: QueueState
}

input QueueListRelationFilter {
  every: QueueWhereInput
  none: QueueWhereInput
  some: QueueWhereInput
}

input QueueOrderByRelationAggregateInput {
  _count: SortOrder
}

input QueueOrderByWithRelationInput {
  address: SortOrder
  capacity: SortOrder
  create_time: SortOrder
  grace_period: SortOrder
  id: SortOrder
  join_code: SortOrder
  max_party_size: SortOrder
  name: SortOrder
  offline_time: SortOrder
  organizer: OrganizerOrderByWithRelationInput
  organizer_id: SortOrder
  password: SortOrder
  state: SortOrder
  users: UserOrderByRelationAggregateInput
}

input QueueRelationFilter {
  is: QueueWhereInput
  isNot: QueueWhereInput
}

enum QueueScalarFieldEnum {
  address
  capacity
  create_time
  grace_period
  id
  join_code
  max_party_size
  name
  offline_time
  organizer_id
  password
  state
}

enum QueueState {
  ACTIVE
  INACTIVE
  PAUSED
}

input QueueUpdateOneRequiredWithoutUsersInput {
  connect: QueueWhereUniqueInput
  connectOrCreate: QueueCreateOrConnectWithoutUsersInput
  create: QueueCreateWithoutUsersInput
  update: QueueUpdateWithoutUsersInput
  upsert: QueueUpsertWithoutUsersInput
}

input QueueUpdateWithoutUsersInput {
  address: StringFieldUpdateOperationsInput
  capacity: IntFieldUpdateOperationsInput
  create_time: DateTimeFieldUpdateOperationsInput
  grace_period: NullableIntFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  join_code: StringFieldUpdateOperationsInput
  max_party_size: IntFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  offline_time: NullableIntFieldUpdateOperationsInput
  organizer: OrganizerUpdateOneRequiredWithoutQueuesInput
  password: StringFieldUpdateOperationsInput
  state: EnumQueueStateFieldUpdateOperationsInput
}

input QueueUpsertWithoutUsersInput {
  create: QueueCreateWithoutUsersInput!
  update: QueueUpdateWithoutUsersInput!
}

input QueueWhereInput {
  AND: [QueueWhereInput!]
  NOT: [QueueWhereInput!]
  OR: [QueueWhereInput!]
  address: StringFilter
  capacity: IntFilter
  create_time: DateTimeFilter
  grace_period: IntNullableFilter
  id: StringFilter
  join_code: StringFilter
  max_party_size: IntFilter
  name: StringFilter
  offline_time: IntNullableFilter
  organizer: OrganizerRelationFilter
  organizer_id: StringFilter
  password: StringFilter
  state: EnumQueueStateFilter
  users: UserListRelationFilter
}

input QueueWhereUniqueInput {
  id: String
  join_code: String
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

type User {
  estimated_wait: Int
  id: String!
  index: Int!
  join_time: DateTime!
  last_online: DateTime
  name: String!
  party_size: Int!
  phone_number: String!
  queue: Queue!
  queue_id: String!
  reneged_time: DateTime
  status: String!
  summoned: Boolean!
  summoned_time: DateTime
  total_wait: Int
}

input UserCreateInput {
  id: String
  index: Int
  join_time: DateTime
  last_online: DateTime
  name: String!
  party_size: Int
  phone_number: String!
  queue: QueueCreateNestedOneWithoutUsersInput!
  reneged_time: DateTime
  status: UserStatus
  summoned: Boolean
  summoned_time: DateTime
  total_wait: Int
}

input UserListRelationFilter {
  every: UserWhereInput
  none: UserWhereInput
  some: UserWhereInput
}

input UserOrderByRelationAggregateInput {
  _count: SortOrder
}

input UserOrderByWithRelationInput {
  id: SortOrder
  index: SortOrder
  join_time: SortOrder
  last_online: SortOrder
  name: SortOrder
  party_size: SortOrder
  phone_number: SortOrder
  queue: QueueOrderByWithRelationInput
  queue_id: SortOrder
  reneged_time: SortOrder
  status: SortOrder
  summoned: SortOrder
  summoned_time: SortOrder
  total_wait: SortOrder
}

enum UserScalarFieldEnum {
  id
  index
  join_time
  last_online
  name
  party_size
  phone_number
  queue_id
  reneged_time
  status
  summoned
  summoned_time
  total_wait
}

enum UserStatus {
  ABANDONED
  DEFERRED
  ENQUEUED
  KICKED
  NOSHOW
  SERVICED
}

input UserUpdateInput {
  id: StringFieldUpdateOperationsInput
  index: IntFieldUpdateOperationsInput
  join_time: DateTimeFieldUpdateOperationsInput
  last_online: NullableDateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  party_size: IntFieldUpdateOperationsInput
  phone_number: StringFieldUpdateOperationsInput
  queue: QueueUpdateOneRequiredWithoutUsersInput
  reneged_time: NullableDateTimeFieldUpdateOperationsInput
  status: EnumUserStatusFieldUpdateOperationsInput
  summoned: BoolFieldUpdateOperationsInput
  summoned_time: NullableDateTimeFieldUpdateOperationsInput
  total_wait: NullableIntFieldUpdateOperationsInput
}

input UserUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  index: IntFieldUpdateOperationsInput
  join_time: DateTimeFieldUpdateOperationsInput
  last_online: NullableDateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  party_size: IntFieldUpdateOperationsInput
  phone_number: StringFieldUpdateOperationsInput
  reneged_time: NullableDateTimeFieldUpdateOperationsInput
  status: EnumUserStatusFieldUpdateOperationsInput
  summoned: BoolFieldUpdateOperationsInput
  summoned_time: NullableDateTimeFieldUpdateOperationsInput
  total_wait: NullableIntFieldUpdateOperationsInput
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  id: StringFilter
  index: IntFilter
  join_time: DateTimeFilter
  last_online: DateTimeNullableFilter
  name: StringFilter
  party_size: IntFilter
  phone_number: StringFilter
  queue: QueueRelationFilter
  queue_id: StringFilter
  reneged_time: DateTimeNullableFilter
  status: EnumUserStatusFilter
  summoned: BoolFilter
  summoned_time: DateTimeNullableFilter
  total_wait: IntNullableFilter
}

input UserWhereUniqueInput {
  id: String
  phone_number: String
}
